#include <stdio.h>
#include <stdlib.h>//standard libraries
#include <string.h>
#include <malloc.h>
#include <time.h> 

int block=0;//the block number of the data we are storing it is the maximum lock size

int sblock=0;// it is the starting bloxk. we write the code as such the sblock will not be greater than teh block. if it is greater than sblock new file will be created
struct node {
char data[10]; // the data from the file is stored bit by bit

struct node*next;
};

struct node1 {// the structure
char name[30];// the name of the file
char time[30];
int size;
struct node*next1;//pointer to the nexxt structure
};
struct node1*head1=NULL;//structue to hold the meta data information
struct node1*first1=NULL;
struct node1*current1=NULL;

struct node*head[100];
struct node*first=NULL;
struct node*current=NULL;

void main()
{
int fsp=0;
int size1=0;
char command[100]; // the open, put get etc commands are written in the command 
//file descritor
FILE*fp;
char *c;
int flag=0;
char*filename;
int i=0,j=0,k=0;
int file=0;	
while(1)
{
printf("PSF>");
scanf("%s%s",command,filename);  //taking the input from the user

if(strcmp(command,"open")==0)
{
	printf("PFS File is opened");
	block=40;// a pfs is opened and allocated 40 blocks of memory
	}
if(strcmp(command,"put")==0) 
{

if(head1==NULL)
{
head1=(struct node1*)malloc(sizeof(struct node1));
first1=head1;
head1->next1=NULL;   // a  linked list is created here. first node
}
else
{
current1=(struct node1*)malloc(sizeof(struct node1));
head1->next1=current1;
first1=current1;
current1->next1=NULL;
}
fp=fopen(filename,"r");   // storng the meta data information
strcpy(head1->name,filename);



char*p1;
time_t timer;
time(&timer);  /// storing the time information in this.
p1 = ctime(&timer);
strcpy(head1->time,p1);


//printf("%s",head1->time);

head[fsp]=NULL;
file++;
if(!fp)
{
printf("failed");
}
while(sblock<block)  //if block less than max block
{

if(head[fsp]==NULL)
{
head[fsp]=(struct node*)malloc(sizeof(struct node));
sblock++;
file--;  //create a node
while((i=fgetc(fp))!=EOF&&size1<256)
{

head[fsp]->data[k]=i;
k++;
//printf("\n%d\n",k);	
size1++;
}
head[1]=head[fsp];
first=head[fsp];
head[fsp]->next=NULL;         //we are creating a blocks which iare of maximum 256 byte nly. if the storage increases than 256 a new node is createed and file is contined to store in teh new node
}
else
{
size1=0,k=0;
if(file!=0)
{
head[fsp]=(struct node*)malloc(sizeof(struct node));
sblock++; //head[fsp ] is the array of pointer which points to multiple files
 first=head[fsp];
head[fsp]->next=NULL;
}
current=(struct node*)malloc(sizeof(struct node));
sblock++;
while((i=fgetc(fp))!=EOF&&size1<256)
{

current->data[k]=i;
k++;
printf("\n%d\n",k);	
size1++;
}

first->next=current;
first=current;
current->next=NULL;  //creating n number of nodes based upon the file size
}
if((i=fgetc(fp))!=EOF)
;
else
{
head1->size=(sblock*256);// caluclating the block sizes
fclose(fp);
break;	
}

}


while(head[fsp]!=NULL)
	{
j=0;
while(j<256)
		{

printf("%c",head[fsp]->data[j]);
j++;
			}        //printing the values stored in teh pfs
head[fsp]=head[fsp]->next;

			}
//printf("\n%d\n", head1->size);
		}

if(strcmp(command,"get")==0)
{
char str[10]="1";   //wring the get code
strcat(filename,str);
printf("%s",filename);
fp=fopen(filename,"w");

while(head[1]!=NULL)
	{
j=0;
while(j<256)
{
str[0]=head[1]->data[j];
//printf("%c",str[0]);
fputc(str[0], fp);           //inserting data in to file and making it to store inn a directory
//fputc(head[fsp]->data[j]);
j++;
			}
head[1]=head[1]->next;

			}
fclose(fp);
	
		}


if(strcmp(command,"dir")==0)
{

printf("%s\t%s\t%d bytes\t\n",head1->name,head1->time,head1->size); //prining the directory
}


if(strcmp(command,"rm")==0)
{

//printf("%s\t%s\t%d bytes\t\n",head1->name,head1->time,head1->size);
head1=NULL;
}

//removing the files
	}



}
